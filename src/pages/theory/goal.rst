Назначение документации
=======================

**Назначение документации — помогать читателям достигать их цели**.

Поэтому очень важно понимать цели ваших читателей. К сожалению большинство людей путают цели и
задачи, что приводит к принятию неверных решений. **Цель — это конечное состояние, в котором
хочется оказаться. Задачи — то, что приходится делать для достижения цели.**

Как узнать цели и не спутать их с задачами
------------------------------------------

Умение выявлять цели и отличать их от задач — важный навык, но обучение ему выходит за пределы
данной документации. `Алан Купер <https://ru.wikipedia.org/wiki/Купер,_Алан>`_ написал замечательную
книгу `Психбольница в руках пациентов <https://yandex.ru/search/?text=ISBN+5932860715>`_,
которая поможет вам в этом. Здесь же приведён только необходимый минимум объяснений.

Купер делит цели на корпоративные, практические и личные. [#asylum]_

Примеры корпоративных целей:

* увеличить прибыль;
* увеличить рыночную долю;
* победить конкурентов.

Примеры практических целей:

* удовлетворять требованиям клиента;
* сохранять информацию о заказах клиента;
* создавать математические модели бизнеса.

Примеры личных целей:

* не чувствовать себя глупо;
* не совершать ошибок;
* выполнить адекватный объем работы;
* развлечься (или хотя бы не страдать от скуки).

Бизнес хочет увеличить прибыль. Для достижения этой *корпоративной цели* перед отделом разработки
ставится задача — сделать новый программный продукт. Эта задача для работников отдела становится
*практической целью*. Но у каждого разработчика есть и свои *личные цели*.

.. pull-quote::

   **Наиболее важными целями считаются личные цели. Самая важная личная цель — сохранить
   достоинство, не почувствовать себя глупо.** [#asylum]_

Важная особенность целей — их немного и они постоянны. Бизнес хочет увеличить прибыль независимо
от того чем он занят и какие технологии использует. Люди не хотят делать лишнюю и скучную работу,
хотят чтобы им платили деньги и уважали. Эти цели неизменны на протяжении веков.

Задачи, в отличие от целей, бесконечно разнообразны и меняются в зависимости от ситуации. Важная
особенность задач — они существуют только потому, что существуют цели, достижению которых они
мешают. Нет, это не оговорка, задачи не *служат* достижению цели, а именно *мешают*. Если человек
может достичь цели не решая задачу, он не будет её решать.

.. pull-quote::

   **Документация должна по возможности избавлять читателя от задач. А если это не удаётся, то
   помогать решать эти задачи с наименьшими затратами.**

Пример
------

Возьмём для примера программиста, которому поручили добавить в программный продукт взаимодействие с
внешней системой отправки электронных писем. При этом требуется возможность прикреплять к письмам
файлы и узнавать о результатах доставки письма (было ли отправлено, не было ли ошибок, было ли
доставлено). Предположим, что разработчик этой системы разместил на своём сайте справочник по API и
даже выложил на ГитХабе библиотеку для работы с этим API.

Программист заходит на сайт системы, открывает раздел «Документация API» и видит там список методов.
Он просматривает все методы в поисках возможности отправлять вложения и проверять состояние письма.
Через некоторое время находит то, что нужно. Далее он ищет в поисковике «клиент API FooBar», находит
ссылку на ГитХаб. Следующий шаг — подключение. Программист устанавливает библиотеку и пишет
инфраструктурный код для сопряжения библиотеки с используемым фреймворком. Остался последний шаг. Он
пишет прикладной код, выполняет пробную отправку письма и получает ошибку «Неправильно указан
получатель». Программист перечитывает документацию, перепроверяет свой код, ещё раз пытается
отправить письмо и опять получает ошибку. Чувствует себя дураком.

Как автор документации мог бы помочь программисту?

Понять личные цели программиста
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Вряд ли мы ошибёмся, если предположим что его личные цели: не почувствовать себя глупо из-за того,
что не удаётся разобраться с задачей, подтвердить среди коллег свой авторитет хорошего программиста,
затратить как можно меньше усилий на решение задачи.

Определить задачи, мешающие достижению целей
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Автор должен составить (в уме или на бумажке, не важно) список возможных задач.

#. Выяснить, подходит ли API под заданные требования.
#. Выяснить, есть ли готовые решения (библиотеки) для работы с этим API.
#. Подключить библиотеку к приложению.
#. Написать прикладной код отправки писем.

Избавить от задач или помочь решить их
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Избавить от первой задачи нельзя, но можно помочь, добавив к документации
:doc:`введение </guides/intro/index>` с перечислением основных возможностей системы. Тогда
программисту не придётся тратить время на просмотр всего списка методов в поисках нужных функций.

Со второй задачей проще, от неё можно вообще избавить программиста, разместив в начале документации
ссылку на библиотеку на ГитХабе.

Разработчики почтовой системы могут помимо библиотеки предоставлять ещё и дополнительные пакеты для
интеграции её с популярными фреймворками. В это случае автор документации может избавить
программиста от задачи номер 3, разместив ссылку на такой пакет либо в справочнике API, либо в
описании библиотеки на ГитХабе, а ещё лучше — и там, и там.

Избавить от написания прикладного кода нельзя, но зато можно помочь. Проблема, с которой столкнулся
наш программист выше, была вызвана небрежностью (или ленью) автора документации, который дал такое
описание метода API:

.. code::

   POST /queue

   Помещает сообщение в очередь на отправку. Тело запроса должно содержать поля:

   - to — получатель письма
   - subject — тема письма
   - body — тело письма

Прочитав это описание, программист написал такой код:

.. code-block:: java

   api.queue.enqueue("user@example.com", "Очень важное письмо", "Текст письма");

Вот только автор не упомянул, что «получатель письма» — это не адрес электронной почты, а
идентификатор, получаемый после добавления адреса в адресную книгу. Надо было написать примерно
так:

.. code::

   POST /queue

   Помещает сообщение в очередь на отправку. Обратите внимание, что отправлять письма можно только
   контактам из адресной книги (см. раздел «Адресные книги»).

   Тело запроса должно содержать поля:

   - to — идентификатор получателя в адресной книге (см. «Добавление адреса в адресную книгу»)
   - subject — тема письма
   - body — тело письма

Ещё хорошо было бы в документацию к библиотеке добавить примеры для типовых задач:

.. code-block:: java

   // Получаем адресную книгу.
   book = api.books.get("default");

   // Добавляем адрес в адресную книгу.
   contactId = book.add("user@example.com", "Василий Пупкин");

   // Отправляем письмо.
   api.queue.enqueue(contactId, "Очень важное письмо", "Текст письма");

Заключение
----------

* Назначение документации — помогать читателям достигать их цели.
* Цели бывают корпоративные, практические и личные.
* Наиболее важными являются личные цели.
* Самая важная личная цель — сохранить достоинство, не почувствовать себя глупо.
* Возможных целей немного и они постоянны.
* Задачи существуют только потому, что существуют цели, достижению которых они мешают.
* Документация должна избавлять читателя от задач или помогать решать их с наименьшими затратами.

.. seealso::

   * :doc:`/theory/principles`

.. [#asylum] Алан Купер. Психбольница в руках пациентов (англ. The Inmates Are Running the Asylum).
   Перевод: Михаил Зислис, Издательство: Символ-Плюс, Год: 2005, 336с ISBN 5-93286-071-5
